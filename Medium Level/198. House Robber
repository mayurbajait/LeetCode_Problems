//Java Solution

class Solution {
    public int rob(int[] a) {
        int dp [] = new int [a.length];
		dp[0] = a[0];
        if(a.length == 1)
            return dp[0];
		dp[1] = Math.max(a[0], a[1]);

		for(int i = 2; i < a.length; i++){
			dp[i] = Math.max(dp[i-1], a[i]+dp[i-2]);
		}
		return dp[a.length-1];
    }
}

//C++ Solution
class Solution {
public:
    int helper(vector<int> &v, int i,int dp[])
    {
        if(i>=v.size())
        return 0;
        if(i==v.size()-1)a
        return v[i];
        if(dp[i]!=-1)
        return dp[i];
        int lr=helper(v,i+2,dp)+v[i];
        int rt=v[i]+helper(v,i+3,dp);
        return dp[i]= max(lr,rt);
    }
    int rob(vector<int>& nums) {
        int mx=-1;
        int dp[101];
        memset(dp,-1,sizeof(dp));
        for(int i=0;i<nums.size();i++)
        {
            mx=max(mx,helper(nums,i,dp));
        }
        return mx;
    }
};
